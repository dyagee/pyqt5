# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'traindesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidget,QTableWidgetItem,QHeaderView,QDialog,QMessageBox
from PyQt5.QtCore import QTimer,QTime,Qt
import time
__version__ = "0.1"
__author__ = "A. Agee"

global D0, T1,T2,T3,T4
global err_message
err_message= ''

#The dictionaries below are used to hold display and booking data
D0 = {
        "Train":"Name of Train",
        "TakeOff":"Takeoff Time",
        "Booked1":"Takeoff Booked Tickets",
        "EmptySeats1":"Takeoff Empty Seats",
        "ReturnTime":"ReturnTime Time",
        "Booked2":"ReturnTime Booked Tickets",
        "EmptySeats2":"ReturnTime Empty Seats"
}
T1 = {
    "Train":"T1",
    "Take off":"9:00",
    "Take off Booked Tickets":0,
    "Take off Empty Seats":480,
    "ReturnTime":"10:00",
    "Return Booked Tickets":0,
    "Return Empty Seats":480
    }
T2 = {
    "Train":"T2",
    "Take off":"11:00",
    "Take off Booked Tickets":0,
    "Take off Empty Seats":480,
    "ReturnTime":"12:00",
    "Return Booked Tickets":0,
    "Return Empty Seats":480

    }
T3 = {
    "Train":"T3",
    "Take off":"13:00",
    "Take off Booked Tickets":0,
    "Take off Empty Seats":480,
    "ReturnTime":"14:00",
    "Return Booked Tickets":0,
    "Return Empty Seats":480
    }

T4 = {
    "Train":"T4",
    "Take off":"15:00",
    "Take off Booked Tickets":0,
    "Take off Empty Seats":480,
    "ReturnTime":"16:00",
    "Return Booked Tickets":0,
    "Return Empty Seats":640
    }
takeOff_discount = {
    "Discounted Tickets":0,
    "Total Tickets":0,
    "ticketsAmount":0
    }
Return_discount = {
    "Discounted Tickets":0,
    "Total Tickets":0,
    "ticketsAmount":0
    }

#These dictionaries are used to process discount and receipt 
takeOff_discount = {
    "Discounted Tickets":0,
    "Total Tickets":0,
    "ticketsAmount":0
    }
Return_discount = {
    "Discounted Tickets":0,
    "Total Tickets":0,
    "ticketsAmount":0
    }




class Ui_MainWindow(object):
        def __init__(self):
                #this function initializes the clock on the app
                super().__init__()
                self.timer = QTimer()
                self.timer.timeout.connect(self.showTime)
                self.timer.start(1000)

        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.setFixedSize(1214, 660)
                MainWindow.setWindowIcon(QtGui.QIcon('trainlogo.png'))
                MainWindow.setStyleSheet("background-color: rgb(170, 170, 127);")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.line = QtWidgets.QFrame(self.centralwidget)
                self.line.setGeometry(QtCore.QRect(56, 270, 1081, 31))
                self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line.setLineWidth(2)
                self.line.setMidLineWidth(8)
                self.line.setFrameShape(QtWidgets.QFrame.HLine)
                self.line.setObjectName("line")
                self.clock = QtWidgets.QLabel(self.centralwidget)
                self.clock.setGeometry(QtCore.QRect(970, 270, 161, 51))
                self.clock.setStyleSheet("background-color: rgb(85, 85, 0);\n"
        "color: rgb(255, 255, 255);")
                self.clock.setFrameShape(QtWidgets.QFrame.Box)
                self.clock.setFrameShadow(QtWidgets.QFrame.Plain)
                self.clock.setLineWidth(3)
                #self.clock.setText("<html><head/><body><p align=\"center\"><span style=\" font-size:12pt;\"><br/></span></p></body></html>")
                self.clock.setObjectName("clock")
                self.takeofftime = QtWidgets.QLineEdit(self.centralwidget)
                self.takeofftime.setGeometry(QtCore.QRect(106, 381, 311, 41))
                self.takeofftime.setAutoFillBackground(False)
                self.takeofftime.setStyleSheet("background-color: rgb(85, 85, 0);\n"
        "color: rgb(255, 255, 255);\n"
        "font: 12pt \"MS Shell Dlg 2\";")
                self.takeofftime.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
                self.takeofftime.setFrame(True)
                self.takeofftime.setCursorMoveStyle(QtCore.Qt.LogicalMoveStyle)
                self.takeofftime.setObjectName("takeofftime")
                self.label = QtWidgets.QLabel(self.centralwidget)
                self.label.setGeometry(QtCore.QRect(216, 361, 111, 21))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(True)
                font.setWeight(75)
                self.label.setFont(font)
                self.label.setObjectName("label")
                self.label_2 = QtWidgets.QLabel(self.centralwidget)
                self.label_2.setGeometry(QtCore.QRect(646, 361, 111, 21))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(True)
                font.setWeight(75)
                self.label_2.setFont(font)
                self.label_2.setObjectName("label_2")
                self.label_3 = QtWidgets.QLabel(self.centralwidget)
                self.label_3.setGeometry(QtCore.QRect(186, 451, 181, 21))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(True)
                font.setWeight(75)
                self.label_3.setFont(font)
                self.label_3.setObjectName("label_3")
                self.label_4 = QtWidgets.QLabel(self.centralwidget)
                self.label_4.setGeometry(QtCore.QRect(606, 451, 181, 21))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(True)
                font.setWeight(75)
                self.label_4.setFont(font)
                self.label_4.setObjectName("label_4")
                self.returntime = QtWidgets.QLineEdit(self.centralwidget)
                self.returntime.setGeometry(QtCore.QRect(536, 381, 291, 41))
                self.returntime.setAutoFillBackground(False)
                self.returntime.setStyleSheet("background-color: rgb(85, 85, 0);\n"
        "color: rgb(255, 255, 255);\n"
        "font: 12pt \"MS Shell Dlg 2\";")
                self.returntime.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
                self.returntime.setFrame(True)
                self.returntime.setCursorMoveStyle(QtCore.Qt.LogicalMoveStyle)
                self.returntime.setObjectName("returntime")
                self.takeofftickets = QtWidgets.QLineEdit(self.centralwidget)
                self.takeofftickets.setGeometry(QtCore.QRect(106, 471, 311, 41))
                self.takeofftickets.setAutoFillBackground(False)
                self.takeofftickets.setStyleSheet("background-color: rgb(85, 85, 0);\n"
        "color: rgb(255, 255, 255);\n"
        "font: 12pt \"MS Shell Dlg 2\";")
                self.takeofftickets.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
                self.takeofftickets.setFrame(True)
                self.takeofftickets.setCursorMoveStyle(QtCore.Qt.LogicalMoveStyle)
                self.takeofftickets.setObjectName("takeofftickets")
                self.returntickets = QtWidgets.QLineEdit(self.centralwidget)
                self.returntickets.setGeometry(QtCore.QRect(536, 471, 291, 41))
                self.returntickets.setAutoFillBackground(False)
                self.returntickets.setStyleSheet("background-color: rgb(85, 85, 0);\n"
        "color: rgb(255, 255, 255);\n"
        "font: 12pt \"MS Shell Dlg 2\";")
                self.returntickets.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
                self.returntickets.setFrame(True)
                self.returntickets.setCursorMoveStyle(QtCore.Qt.LogicalMoveStyle)
                self.returntickets.setObjectName("returntickets")
                self.errorpanel = QtWidgets.QLabel(self.centralwidget)
                self.errorpanel.setGeometry(QtCore.QRect(76, 530, 761, 81))
                font = QtGui.QFont()
                font.setPointSize(12)
                self.errorpanel.setFont(font)
                self.errorpanel.setStyleSheet("color: rgb(255, 10, 26);")
                self.errorpanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.errorpanel.setWordWrap(True)
                self.errorpanel.setObjectName("errorpanel")
                self.frame = QtWidgets.QFrame(self.centralwidget)
                self.frame.setGeometry(QtCore.QRect(421, 381, 111, 131))
                self.frame.setFrameShape(QtWidgets.QFrame.Panel)
                self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame.setLineWidth(11)
                self.frame.setObjectName("frame")
                self.timeStamp = QtWidgets.QLabel(self.centralwidget)
                self.timeStamp.setGeometry(QtCore.QRect(46, 300, 1091, 41))
                self.timeStamp.setFrameShape(QtWidgets.QFrame.Panel)
                self.timeStamp.setFrameShadow(QtWidgets.QFrame.Raised)
                self.timeStamp.setLineWidth(4)
                self.timeStamp.setText("")
                self.timeStamp.setObjectName("timeStamp")
                self.wholeAppFrame = QtWidgets.QFrame(self.centralwidget)
                self.wholeAppFrame.setGeometry(QtCore.QRect(6, 0, 1201, 621))
                self.wholeAppFrame.setStyleSheet("border-color: rgb(201, 255, 172);")
                self.wholeAppFrame.setFrameShape(QtWidgets.QFrame.Box)
                self.wholeAppFrame.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.wholeAppFrame.setLineWidth(2)
                self.wholeAppFrame.setMidLineWidth(0)
                self.wholeAppFrame.setObjectName("wholeAppFrame")
                self.frame_2 = QtWidgets.QFrame(self.wholeAppFrame)
                self.frame_2.setGeometry(QtCore.QRect(900, 480, 181, 41))
                self.frame_2.setFrameShape(QtWidgets.QFrame.HLine)
                self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_2.setLineWidth(11)
                self.frame_2.setMidLineWidth(29)
                self.frame_2.setObjectName("frame_2")
                self.booktickets = QtWidgets.QPushButton(self.wholeAppFrame)
                self.booktickets.setGeometry(QtCore.QRect(923, 430, 131, 51))
                self.booktickets.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "border-color: rgb(5, 38, 252);")
                self.booktickets.setAutoDefault(False)
                self.booktickets.setDefault(True)
                self.booktickets.setObjectName("booktickets")
                self.booktickets.clicked.connect(self.bookTrain)
                self.printreceipt = QtWidgets.QPushButton(self.wholeAppFrame)
                self.printreceipt.setGeometry(QtCore.QRect(943, 520, 101, 41))
                self.printreceipt.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "border-color: rgb(5, 38, 252);")
                self.printreceipt.setAutoDefault(False)
                self.printreceipt.setDefault(True)
                self.printreceipt.setFlat(False)
                self.printreceipt.setObjectName("printreceipt")
                self.printreceipt.clicked.connect(self.launchpopup)
                self.displayTable = QtWidgets.QTableWidget(self.wholeAppFrame)
                self.displayTable.setGeometry(QtCore.QRect(40, 60, 1081, 201))
                self.displayTable.setStyleSheet("color: rgb(0, 0, 0);\n"
        "background-color: rgb(250, 247, 167);\n"
        "font:16pt \"MS Shell Dlg 2\";")
                self.displayTable.setFrameShape(QtWidgets.QFrame.Box)
                self.displayTable.setFrameShadow(QtWidgets.QFrame.Plain)
                self.displayTable.setLineWidth(0)
                self.displayTable.setMidLineWidth(0)
                self.displayTable.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
                self.displayTable.setProperty("showDropIndicator", False)
                self.displayTable.setDragDropOverwriteMode(False)
                self.displayTable.setTextElideMode(QtCore.Qt.ElideMiddle)
                self.displayTable.setRowCount(6)
                self.displayTable.setColumnCount(7)
                self.displayTable.setObjectName("displayTable")
                self.displayTable.horizontalHeader().setVisible(False)
                self.displayTable.horizontalHeader().setHighlightSections(False)
                self.displayTable.verticalHeader().setVisible(False)
                self.displayTable.verticalHeader().setHighlightSections(False)
                self.displayTable.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
                #self.displayTable.horizontalHeaderItem(0).setTextAlignment(Qt.AlignHCenter)
                #self.displayTable.resizeRowsToContents()
                self.dataHeader = QtWidgets.QTableWidget(self.wholeAppFrame)
                self.dataHeader.setGeometry(QtCore.QRect(40, 20, 1081, 41))
                self.dataHeader.setStyleSheet("color: rgb(0, 0, 0);\n"
        "background-color: rgb(255, 255, 255);\n"
        "font: 75 18pt \"MS Shell Dlg 2\";")
                self.dataHeader.setFrameShape(QtWidgets.QFrame.Box)
                self.dataHeader.setFrameShadow(QtWidgets.QFrame.Plain)
                self.dataHeader.setLineWidth(0)
                self.dataHeader.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
                self.dataHeader.setProperty("showDropIndicator", False)
                self.dataHeader.setRowCount(1)
                self.dataHeader.setColumnCount(7)
                self.dataHeader.setObjectName("dataHeader")
                self.dataHeader.horizontalHeader().setVisible(False)
                self.dataHeader.horizontalHeader().setHighlightSections(False)
                self.dataHeader.verticalHeader().setVisible(False)
                self.dataHeader.verticalHeader().setHighlightSections(False)
                self.dataHeader.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
                self.Billboard()



                self.table_frame = QtWidgets.QFrame(self.wholeAppFrame)
                self.table_frame.setGeometry(QtCore.QRect(30, 10, 1101, 261))
                self.table_frame.setStyleSheet("background-color: rgb(85, 85, 0);")
                self.table_frame.setFrameShape(QtWidgets.QFrame.Panel)
                self.table_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.table_frame.setLineWidth(7)
                self.table_frame.setObjectName("table_frame")
                self.table_frame.raise_()
                self.frame_2.raise_()
                self.booktickets.raise_()
                self.printreceipt.raise_()
                self.displayTable.raise_()
                self.dataHeader.raise_()
                self.wholeAppFrame.raise_()
                self.line.raise_()
                self.takeofftime.raise_()
                self.label.raise_()
                self.label_2.raise_()
                self.label_3.raise_()
                self.label_4.raise_()
                self.returntime.raise_()
                self.takeofftickets.raise_()
                self.returntickets.raise_()
                self.errorpanel.raise_()
                self.frame.raise_()
                self.timeStamp.raise_()
                self.clock.raise_()
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 1214, 21))
                self.menubar.setObjectName("menubar")
                MainWindow.setMenuBar(self.menubar)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "Train Booking Station"))
                self.takeofftime.setPlaceholderText(_translate("MainWindow", "Enter Take  off Time"))
                self.label.setText(_translate("MainWindow", "Take Off Time"))
                self.label_2.setText(_translate("MainWindow", "ReturnTime Time"))
                self.label_3.setText(_translate("MainWindow", "Number of TakeOff Tickets"))
                self.label_4.setText(_translate("MainWindow", "Number of ReturnTime Tickets"))
                self.returntime.setPlaceholderText(_translate("MainWindow", "Enter Retun Time"))
                self.takeofftickets.setPlaceholderText(_translate("MainWindow", "Enter  number of tickets"))
                self.returntickets.setPlaceholderText(_translate("MainWindow", "Enter number of tickets"))
                self.booktickets.setText(_translate("MainWindow", "Book Tickets"))
                self.printreceipt.setText(_translate("MainWindow", "Receipt"))
        

        #these functions are customized to add more functionalities to the app
        #the showtime fuction formats the clock time output
        def showTime(self):
                #this function compute the time for display in clockLabel
                current_time = QTime.currentTime()
                time_str = current_time.toString("hh:mm:ss")
                #the html code used to align and customize the time display
                time_str = '<html><head/><body><p align="center"><span style=" font-size:18pt;">' + time_str +'</span></p></body></html>'
                self.clock.setText(time_str)
        
        #this controls the data displayed on the displayTable
        def Billboard(self):
                #Data= [D0.keys(),T1.values(),T2.values(),T3.values(),T4.values()]
                #return tabulate(Data, headers="firstrow",tablefmt="pspl", colalign="left")
                
                #updating values of train dictionary to the displayTable using a for loop
                #self.displayTable.setHorizontalHeaderLabels(D0.keys())
                m = 0
                n=0
                k=0
                for item in D0.keys():
                        self.dataHeader.setItem(m,k,QTableWidgetItem(item))
                        k= k+1

                for row1 in T1.values():
                        items = QTableWidgetItem()
                        items.setData(Qt.DisplayRole,row1)
                        self.displayTable.setItem(m,n,items)
                        n=n+1
                for row2 in T2.values():
                        items = QTableWidgetItem()
                        items.setData(Qt.DisplayRole,row2)
                        self.displayTable.setItem(m,n,items)
                        n=n+1
                for row3 in T3.values():
                        items = QTableWidgetItem()
                        items.setData(Qt.DisplayRole,row3)
                        self.displayTable.setItem(m,n,items)
                        n=n+1
                for row4 in T4.values():
                        items = QTableWidgetItem()
                        items.setData(Qt.DisplayRole,row4)
                        self.displayTable.setItem(m,n,items)
                        n=n+1
        #the global declaration to enable us use these variables in userInput2()
        global booked
        global bookedT1
        global bookedT2
        global bookedT3
        global bookedT4
        
        def bookTrain(self):
                global err_message
                err_message = ''
                totalSeats = 480
                '''Variables to chect if Seats are vacant'''
                booked = T1["Take off Booked Tickets"]
                remainingTickets = T1["Take off Empty Seats"]
                bookedT2 = T2["Take off Booked Tickets"]
                remainingTicketsT2 = T2["Take off Empty Seats"]
                bookedT3 = T3["Take off Booked Tickets"]
                remainingTicketsT3 = T3["Take off Empty Seats"]
                bookedT4 = T4["Take off Booked Tickets"]
                remainingTicketsT4 = T4["Take off Empty Seats"]
                #these variables are only meant to check if empty inputs
                chk1 = self.takeofftime.text()
                chk2 = self.takeofftickets.text()
                chk3 = self.returntime.text()
                chk4= self.returntickets.text()
                

                
                #if no or some value are not submitted, do nothing else execute this block
                if chk1!= '' and chk2 !='' and chk3 != '' and chk4 != '':
                        #these variables are used for the tabulation and documentation
                        TakeOff = int(self.takeofftime.text())
                        NumberOftickets = int(self.takeofftickets.text())
                        ReturnTime = int(self.returntime.text())
                        NumberOftickets2 = int(self.returntickets.text())

                        if ReturnTime >= TakeOff:
                                #Takeoff time must not be greater than returntime
                                if TakeOff == 9 and NumberOftickets>0 and NumberOftickets<=480:
                                        if T1["Take off Empty Seats"] != "Closed":
                                                checkValue = booked + NumberOftickets
                                                #this checkValue is used to check if enough tickets are available
                                                if totalSeats-checkValue>=0:
                                                        self.userInput2()

                                                else:
                                                        err_message = f"Remaining Number of Take Off Tickets is {remainingTickets}"

                                        else:
                                                err_message= "Selected TakeOff tickets are closed"

                                elif TakeOff == 11 and NumberOftickets>0 and NumberOftickets<=480:
                                        if T2["Take off Empty Seats"] != "Closed":
                                                checkValue = bookedT2 + NumberOftickets
                                                if totalSeats-checkValue>=0:
                                                        self.userInput2()
                                                else:
                                                        err_message = f"Remaining Number of Take Off Tickets is {remainingTicketsT2}"
                                
                                        else:
                                                err_message = "Selected TakeOff tickets are closed"

                                elif TakeOff == 13 and NumberOftickets>0 and NumberOftickets<=480:
                                        if T3["Take off Empty Seats"] != "Closed":
                                                checkValue = bookedT3 + NumberOftickets
                                                if totalSeats-checkValue>=0:
                                                        self.userInput2()
                                                else:
                                                        err_message = f"Remaining Number of Take Off Tickets is {remainingTicketsT3}"

                                        else:
                                                err_message = "Selected TakeOff tickets are closed"

                                elif TakeOff == 15 and NumberOftickets>0 and NumberOftickets<=480:
                                        if T4["Take off Empty Seats"] != "Closed":
                                                checkValue = bookedT4 + NumberOftickets
                                                if totalSeats-checkValue>=0:
                                                        self.userInput2()
                                                else:
                                                        err_message = f"Remaining Number of Take Off Tickets is {remainingTicketsT4}"

                                        else:
                                                err_message = "Selected TakeOff tickets are closed"

                                else:
                                        err_message = "Void!!!\n Check Inputed Data\n Entered Wrong Take Off Time or Number of Tickets or limited Tickets left"
                        
                        else:
                                err_message = "Void!!!\n TakeOff Time must Not be Greater than ReturnTime Time"
                        
                        self.Billboard()
                        self.errorpanel.setText(err_message)
                        self.takeofftime.clear()
                        self.takeofftickets.clear()
                        self.returntime.clear()
                        self.returntickets.clear()
                else:
                        #if no data is submitted; do nothing
                        pass
                        self.errorpanel.setText('')
                
        #this function is called to run return tickets after criterias for take off tickets are met
        def userInput2(self):
        
                global err_message
                global booked
                global bookedT1
                global bookedT2
                global bookedT3
                global bookedT4
                TakeOff = int(self.takeofftime.text())
                NumberOftickets = int(self.takeofftickets.text())
                ReturnTime = int(self.returntime.text())
                NumberOftickets2 = int(self.returntickets.text())
                totalSeats = 480
                '''Variables to chect if Seats are vacant'''
                bookedT1 = T1["Return Booked Tickets"]
                remainingTicketsT1 = T1["Return Empty Seats"]
                bookedT22 = T2["Return Booked Tickets"]
                remainingTicketsT22 = T2["Return Empty Seats"]
                bookedT33 = T3["Return Booked Tickets"]
                remainingTicketsT33 = T3["Return Empty Seats"]
                bookedT44 = T4["Return Booked Tickets"]
                remainingTicketsT44 = T4["Return Empty Seats"]
                if ReturnTime == 10 and NumberOftickets2>0 and NumberOftickets2<=480:
                        checkValue = bookedT1 + NumberOftickets2
                        if T1["Return Empty Seats"] != "Closed":
                                        
                                if totalSeats-checkValue>=0:
                                        #this checkValue is used to check if enough tickets are available
                                        #if enough tickets are available for the selected return, book the selected Train pair

                                        if TakeOff == 9:
                                                T1["Take off Booked Tickets"] +=NumberOftickets
                                                if T1["Take off Booked Tickets"]>=480:
                                                        T1["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T1["Take off Empty Seats"] -=NumberOftickets
                                                
                                        if TakeOff == 11:
                                                T2["Take off Booked Tickets"] +=NumberOftickets
                                                if T2["Take off Booked Tickets"]>=480:
                                                        T2["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T2["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 13:
                                                T3["Take off Booked Tickets"] +=NumberOftickets
                                                if T3["Take off Booked Tickets"]>=480:
                                                        T3["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T3["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 15:
                                                T4["Take off Booked Tickets"] +=NumberOftickets
                                                if T4["Take off Booked Tickets"]>=480:
                                                        T4["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T4["Take off Empty Seats"] -=NumberOftickets
                                        T1["Return Booked Tickets"] +=NumberOftickets2
                                        if T1["Return Booked Tickets"]>=480:
                                                T1["Return Empty Seats"] = "Closed"
                                        elif T1["Return Booked Tickets"]<=480:
                                                T1["Return Empty Seats"] -=NumberOftickets2
                                        self.processPayment1(NumberOftickets)
                                        self.processPayment2(NumberOftickets2)

                                else:
                                        err_message= f"Remaining Number of Return Tickets is {remainingTicketsT1}"
                        else:
                                err_message = "Selected Return Tickets are closed "
                        
                elif ReturnTime == 12 and NumberOftickets2>0 and NumberOftickets2<=480:
                        checkValue = bookedT22 + NumberOftickets2
                        if T2["Return Empty Seats"] != "Closed":
                                        
                                if totalSeats-checkValue>=0:
                                        if TakeOff == 9:
                                                T1["Take off Booked Tickets"] +=NumberOftickets
                                                if T1["Take off Booked Tickets"]>=480:
                                                        T1["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T1["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 11:
                                                T2["Take off Booked Tickets"] +=NumberOftickets
                                                if T2["Take off Booked Tickets"]>=480:
                                                        T2["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T2["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 13:
                                                T3["Take off Booked Tickets"] +=NumberOftickets
                                                if T3["Take off Booked Tickets"]>=480:
                                                        T3["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T3["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 15:
                                                T4["Take off Booked Tickets"] +=NumberOftickets
                                                if T4["Take off Booked Tickets"]>=480:
                                                        T4["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T4["Take off Empty Seats"] -=NumberOftickets

                                        T2["Return Booked Tickets"] +=NumberOftickets2
                                        if T2["Return Booked Tickets"]>=480:
                                                T2["Return Empty Seats"] = "Closed"
                                        elif T2["Return Booked Tickets"]<=480:
                                                T2["Return Empty Seats"] -=NumberOftickets2
                                        
                                        #process the payment receipt
                                        self.processPayment1(NumberOftickets)
                                        self.processPayment2(NumberOftickets2)

                                           
                                else:

                                        err_message =  f"Remaining Number of Ticket is {remainingTicketsT22}"
                                        
                        else:
                                err_message = "Selected Return Tickets are closed"

                elif ReturnTime == 14 and NumberOftickets2>0 and NumberOftickets2<=480:
                        checkValue = bookedT33 + NumberOftickets2
                        if T3["Return Empty Seats"] != "Closed":

                                if totalSeats-checkValue>=0:
                                        if TakeOff == 9:
                                                T1["Take off Booked Tickets"] +=NumberOftickets
                                                if T1["Take off Booked Tickets"]>=480:
                                                        T1["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T1["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 11:
                                                T2["Take off Booked Tickets"] +=NumberOftickets
                                                if T2["Take off Booked Tickets"]>=480:
                                                        T2["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T2["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 13:
                                                T3["Take off Booked Tickets"] +=NumberOftickets
                                                if T3["Take off Booked Tickets"]>=480:
                                                        T3["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T3["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 15:
                                                T4["Take off Booked Tickets"] +=NumberOftickets
                                                if T4["Take off Booked Tickets"]>=480:
                                                        T4["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T4["Take off Empty Seats"] -=NumberOftickets

                                        T3["Return Booked Tickets"] +=NumberOftickets2
                                        if T3["Return Booked Tickets"]>=480:
                                                T3["Return Empty Seats"] = "Closed"
                                        elif T3["Return Booked Tickets"]<=480:
                                                T3["Return Empty Seats"] -=NumberOftickets2
                                        
                                        #process the payment receipt
                                        self.processPayment1(NumberOftickets)
                                        self.processPayment2(NumberOftickets2)
                                else:
                                        err_message = f"Remaining Number of Ticket is {remainingTicketsT33}"
                                
                        else:
                                err_message = "Selected Return Tickets are closed"

                elif ReturnTime == 16 and NumberOftickets2>0 and NumberOftickets2<=640:
                        totalSeats = 640
                        checkValue = bookedT44 + NumberOftickets2
                        if T4["Return Empty Seats"] != "Closed":

                                if totalSeats-checkValue>=0:
                                        if TakeOff == 9:
                                                T1["Take off Booked Tickets"] +=NumberOftickets
                                                if T1["Take off Booked Tickets"]>=480:
                                                        T1["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T1["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 11:
                                                T2["Take off Booked Tickets"] +=NumberOftickets
                                                if T2["Take off Booked Tickets"]>=480:
                                                        T2["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T2["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 13:
                                                T3["Take off Booked Tickets"] +=NumberOftickets
                                                if T3["Take off Booked Tickets"]>=480:
                                                        T3["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T3["Take off Empty Seats"] -=NumberOftickets
                                        if TakeOff == 15:
                                                T4["Take off Booked Tickets"] +=NumberOftickets
                                                if T4["Take off Booked Tickets"]>=480:
                                                        T4["Take off Empty Seats"] = "Closed"
                                                else:
                                                        T4["Take off Empty Seats"] -=NumberOftickets

                                        T4["Return Booked Tickets"] +=NumberOftickets2
                                        if T4["Return Booked Tickets"]>=640:
                                                T4["Return Empty Seats"] = "Closed"
                                        elif T4["Return Booked Tickets"]<=640:
                                                T4["Return Empty Seats"] -=NumberOftickets2 

                                        #process the payment receipt
                                        self.processPayment1(NumberOftickets)
                                        self.processPayment2(NumberOftickets2)
                                else:
                                        err_message = f"Remaining Number of Ticket is {remainingTicketsT44}"
                        else:
                                err_message = "Selected Return Tickets are closed"
                        #self.errorpanel.setText(err_message)  
                                
                else:
                        err_message =  " Void!!!\n Check Inputed Data\n Entered Wrong Return Time or Number of Tickets or limited tickets left"

         #this function processes the payment and discounts for take off tickets                            
        def processPayment1(self,NumTicket):
                n =0

                for i in range(1,NumTicket+1):
                        if (i%10 == 0):
                                n +=1
                totalTickets = NumTicket - n
                takeOff_discount["Total Tickets"] = NumTicket/1
                takeOff_discount["ticketsAmount"] = totalTickets * 25
                takeOff_discount["Discounted Tickets"] = n


                '''if(NumTicket % 10 ==0):
                        NumDiscounted = NumTicket/10
                        totalTickets = NumTicket - NumDiscounted
                        takeOff_discount["Total Tickets"] = NumTicket/1
                        takeOff_discount["ticketsAmount"] = totalTickets * 25
                        takeOff_discount["Discounted Tickets"] = NumDiscounted 
                else:
                        totalTickets = NumTicket
                        takeOff_discount["Total Tickets"] = NumTicket/1
                        takeOff_discount["ticketsAmount"] = totalTickets * 25
                        '''
        #this function processes the payment and discounts for return tickets
        def processPayment2(self,NumTicket):
                #check for every 10th ticket, if there is, give a discount and discounted amount
                n =0

                for i in range(1,NumTicket+1):
                        if (i%10 == 0):
                                n +=1
                totalTickets = NumTicket - n
                Return_discount["Total Tickets"] = NumTicket/1
                Return_discount["ticketsAmount"] = totalTickets * 25
                Return_discount["Discounted Tickets"] = n

                '''if(NumTicket % 10 ==0):
                        NumDiscounted = NumTicket/10
                        totalTickets = NumTicket - NumDiscounted
                        Return_discount["Total Tickets"] = NumTicket/1
                        Return_discount["ticketsAmount"] = totalTickets * 25
                        Return_discount["Discounted Tickets"] = NumDiscounted
                        
                else:
                        #else, give the standard payment 
                        totalTickets = NumTicket
                        Return_discount["Total Tickets"] = NumTicket/1
                        Return_discount["ticketsAmount"] = totalTickets * 25
                '''
        
        #this funtion for receipt, it take values from the processed payment and displays it in a new window
        def Receipt(self):
                str1 = str(takeOff_discount["Total Tickets"])
                str2 = str(takeOff_discount["Discounted Tickets"])
                str3 = str(takeOff_discount["ticketsAmount"])
                str4 = str(Return_discount["Total Tickets"])
                str5 = str(Return_discount["Discounted Tickets"])
                str6 = str(Return_discount["ticketsAmount"])

                strData =  (f"\n\n*****************HAVE A NICE JOURNEY***************\n\n"
                "Ticket Details:\n\n"
                "TAKE OFF---> \n"
                f"Total Tickets: {str1}   Discounted Tickets: {str2} Tickets Amount: ${str3}"
                "\n\n RETURN <---\n\n"
                f"Total Tickets: {str4}   Discounted Tickets: {str5} Tickets Amount: ${str6}")
                return strData
                #self.errorpanel.setText(strData)

        def launchpopup(self):
                pop = self.Receipt()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText(pop)
                msg.setWindowTitle("payMent Receipt")
                msg.setStandardButtons(QMessageBox.Ok)
                retal = msg.exec_()
                #pop.show



                        
        



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
